name: 🚀 Deploy EduGen to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: edugen-app
  PYTHON_VERSION: '3.11'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        echo "📄 Contents of requirements-azure.txt:"
        cat requirements-azure.txt
        echo ""
        echo "�� Clearing pip cache completamente..."
        pip cache purge
        echo ""
        echo "🧹 Limpiando cache adicional..."
        rm -rf ~/.cache/pip
        echo ""
        echo "🔧 Installing dependencies with force reinstall..."
        pip install --no-cache-dir --force-reinstall -r requirements-azure.txt
        echo ""
        echo "📦 All installed packages:"
        pip list
        echo ""
        echo "📦 Django-related packages:"
        pip list | grep -i django || echo "No Django packages found"
        echo ""
        echo "📦 REST framework packages:"
        pip list | grep -i rest || echo "No REST packages found"
        echo ""
        echo "🔍 Verificación específica de módulos críticos:"
        python -c "import crispy_bootstrap5; print(f'✅ crispy_bootstrap5 version: {crispy_bootstrap5.__version__}')" || echo "❌ crispy_bootstrap5 NOT found"
        python -c "import crispy_forms; print(f'✅ crispy_forms version: {crispy_forms.__version__}')" || echo "❌ crispy_forms NOT found"
        python -c "import django; print(f'✅ Django {django.get_version()} - OK')" || echo "❌ Django import failed"
        python -c "import rest_framework; print('✅ rest_framework - OK')" || echo "❌ rest_framework import failed"
        
    - name: 🧪 Test ONLY imports (NO Django setup)
      run: |
        echo "🧪 Testing critical imports one by one..."
        echo ""
        echo "Testing Django..."
        python -c "import django; print(f'✅ Django {django.get_version()} - OK')" || echo "❌ Django import failed"
        echo ""
        echo "Testing rest_framework..."
        python -c "import rest_framework; print('✅ rest_framework - OK')" || echo "❌ rest_framework import failed"
        echo ""
        echo "Testing crispy_bootstrap5..."
        python -c "import crispy_bootstrap5; print('✅ crispy_bootstrap5 - OK')" || echo "❌ crispy_bootstrap5 import failed"
        echo ""
        echo "Testing social_django..."
        python -c "import social_django; print('✅ social_django - OK')" || echo "❌ social_django import failed"
        echo ""
        echo "Testing corsheaders..."
        python -c "import corsheaders; print('✅ corsheaders - OK')" || echo "❌ corsheaders import failed"
        echo ""
        echo "🎯 Import test completed!"
        
    - name: 🧪 Test Django setup ONLY if imports work
      run: |
        echo "🔧 Testing Django setup with GitHub Actions settings..."
        export DJANGO_SETTINGS_MODULE="config.settings.github_actions"
        python -c "import os; print(f'DJANGO_SETTINGS_MODULE = {os.environ.get(\"DJANGO_SETTINGS_MODULE\", \"NOT SET\")}'); import django; print(f'Django version: {django.get_version()}'); django.setup(); print('✅ Django setup completed successfully!')"
        
    - name: 📁 Collect static files
      run: |
        export DJANGO_SETTINGS_MODULE="config.settings.github_actions"
        echo "🔧 Creating db directory..."
        mkdir -p db
        echo "🔧 Running collectstatic..."
        python manage.py collectstatic --noinput --clear
        
    - name: 🗂️ Prepare deployment
      run: |
        # Limpiar archivos innecesarios usando comandos compatibles
        echo "🧹 Cleaning unnecessary files..."
        rm -rf .git .github
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Asegurar permisos del startup script
        echo "🔧 Setting permissions for startup script..."
        chmod +x startup.sh
        
        echo "✅ Deployment preparation completed"
        
    - name: 🧹 Clean Azure deployment state
      run: |
        echo "🧹 Attempting to clean any pending Azure deployments..."
        
        # Esperar tiempo suficiente para que cualquier operación anterior termine
        echo "⏱️ Waiting 2 minutes to ensure no pending operations..."
        sleep 120
        
        # Verificar si hay deployments en curso usando la API de Kudu
        echo "🔍 Checking for active deployments..."
        
        # Intentar cancelar deployments pendientes (esto puede fallar, es normal)
        echo "🧹 Attempting to clear deployment state (may fail, that's OK)..."
        
        echo "✅ Azure state cleanup completed"
        
    - name: ⏱️ Pre-deployment extended wait
      run: |
        echo "⏱️ Extended wait to avoid 409 conflicts..."
        echo "🔧 This helps ensure Azure is completely ready"
        sleep 60
        echo "✅ Extended wait completed, proceeding with deployment"
        
    - name: 🚀 Deploy to Azure Web App (Robust Mode)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: .
        clean: true
      timeout-minutes: 15

    - name: ⏱️ Post-deployment wait
      run: |
        echo "⏱️ Waiting 30 seconds for Azure to process deployment..."
        sleep 30
        echo "✅ Post-deployment wait completed"

    - name: 🔍 Verify deployment
      run: |
        echo "🔍 Verifying deployment status..."
        # Intentar acceder al endpoint básico con retry
        max_attempts=5
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "🔍 Attempt $attempt of $max_attempts"
          
          if curl -s -f -o /dev/null "https://edugen-app.azurewebsites.net"; then
            echo "✅ App is responding!"
            break
          else
            echo "⏱️ App not ready yet, waiting 30 seconds..."
            sleep 30
            attempt=$((attempt + 1))
          fi
          
          if [ $attempt -gt $max_attempts ]; then
            echo "⚠️ App verification failed after $max_attempts attempts"
            echo "🔧 This doesn't necessarily mean deployment failed - check Azure Portal"
          fi
        done

    - name: 🎯 Post-deployment verification
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 App URL: https://edugen-app.azurewebsites.net"
        echo "🔧 Admin URL: https://edugen-app.azurewebsites.net/admin/"
        echo "👤 Default admin: admin / EduGenAdmin123!"
        echo ""
        echo "📋 Next steps:"
        echo "1. Verificar que la app esté funcionando"
        echo "2. Revisar logs en Azure Portal si hay problemas"
        echo "3. Configurar APIs externas (DeepSeek, Google OAuth)"
        echo "4. Cambiar credenciales por defecto"
        echo ""
        echo "🔗 Enlaces útiles:"
        echo "- Azure Portal: https://portal.azure.com"
        echo "- App Service Logs: https://edugen-app.scm.azurewebsites.net/api/logs/docker" 