from django.core.management.base import BaseCommand
from django.db import transaction
from django.utils import timezone
import logging

from apps.academic.models import Enrollment, Section
from apps.portfolios.signals import manually_sync_student_with_section

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Sincroniza autom√°ticamente estudiantes existentes con temas y materiales de su secci√≥n'

    def add_arguments(self, parser):
        parser.add_argument(
            '--section',
            type=str,
            help='Sincronizar solo estudiantes de una secci√≥n espec√≠fica (formato: "GradoX-SeccionY")'
        )
        parser.add_argument(
            '--student-dni',
            type=str,
            help='Sincronizar solo un estudiante espec√≠fico por DNI'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Ejecutar en modo de prueba sin hacer cambios reales'
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üéì Iniciando sincronizaci√≥n autom√°tica de estudiantes...'))
        
        # Filtros opcionales
        section_filter = options.get('section')
        student_dni = options.get('student_dni')
        dry_run = options.get('dry_run', False)
        
        if dry_run:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è MODO PRUEBA - No se har√°n cambios reales'))
        
        try:
            # Obtener matr√≠culas activas
            enrollments = Enrollment.objects.filter(status='ACTIVE').select_related(
                'student', 'student__user', 'section', 'section__grade'
            )
            
            # Aplicar filtros
            if section_filter:
                try:
                    grade_name, section_name = section_filter.split('-')
                    enrollments = enrollments.filter(
                        section__grade__name=grade_name,
                        section__name=section_name
                    )
                    self.stdout.write(f"üéØ Filtrando por secci√≥n: {section_filter}")
                except ValueError:
                    self.stdout.write(
                        self.style.ERROR('‚ùå Formato de secci√≥n inv√°lido. Use: "GradoX-SeccionY"')
                    )
                    return
            
            if student_dni:
                enrollments = enrollments.filter(student__dni=student_dni)
                self.stdout.write(f"üéØ Filtrando por estudiante DNI: {student_dni}")
            
            if not enrollments.exists():
                self.stdout.write(self.style.WARNING('‚ö†Ô∏è No se encontraron estudiantes para sincronizar'))
                return
            
            total_students = enrollments.count()
            self.stdout.write(f"üìä Estudiantes a sincronizar: {total_students}")
            
            successful_syncs = 0
            failed_syncs = 0
            
            for enrollment in enrollments:
                student = enrollment.student
                section = enrollment.section
                
                self.stdout.write(
                    f"üîÑ Procesando: {student.user.get_full_name()} "
                    f"({student.dni}) - Secci√≥n: {section.grade.name}-{section.name}"
                )
                
                if not dry_run:
                    try:
                        success = manually_sync_student_with_section(student, section)
                        if success:
                            successful_syncs += 1
                            self.stdout.write(
                                self.style.SUCCESS(f"  ‚úÖ Sincronizado exitosamente")
                            )
                        else:
                            failed_syncs += 1
                            self.stdout.write(
                                self.style.ERROR(f"  ‚ùå Error en sincronizaci√≥n")
                            )
                    except Exception as e:
                        failed_syncs += 1
                        self.stdout.write(
                            self.style.ERROR(f"  ‚ùå Error: {str(e)}")
                        )
                else:
                    self.stdout.write("  üîç (Modo prueba - no se realizar√°n cambios)")
            
            # Resumen final
            self.stdout.write("\n" + "="*50)
            self.stdout.write(self.style.SUCCESS("üìä RESUMEN DE SINCRONIZACI√ìN"))
            self.stdout.write(f"üë• Total estudiantes procesados: {total_students}")
            
            if not dry_run:
                self.stdout.write(f"‚úÖ Sincronizaciones exitosas: {successful_syncs}")
                self.stdout.write(f"‚ùå Sincronizaciones fallidas: {failed_syncs}")
                
                if successful_syncs > 0:
                    self.stdout.write(
                        self.style.SUCCESS(
                            f"üéâ ¬°Sincronizaci√≥n completada! {successful_syncs} estudiantes "
                            f"ahora tienen sus temas y materiales asignados autom√°ticamente."
                        )
                    )
            else:
                self.stdout.write(
                    self.style.WARNING("‚ÑπÔ∏è Ejecute sin --dry-run para realizar los cambios reales")
                )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Error general en sincronizaci√≥n: {str(e)}")
            )
            
        self.stdout.write("\nüéì Proceso de sincronizaci√≥n finalizado.")

    def show_section_info(self):
        """Muestra informaci√≥n sobre las secciones disponibles"""
        self.stdout.write("\nüìö SECCIONES DISPONIBLES:")
        sections = Section.objects.select_related('grade').order_by('grade__name', 'name')
        
        for section in sections:
            student_count = Enrollment.objects.filter(
                section=section, 
                status='ACTIVE'
            ).count()
            
            self.stdout.write(
                f"  ‚Ä¢ {section.grade.name}-{section.name} "
                f"({student_count} estudiantes activos)"
            ) 